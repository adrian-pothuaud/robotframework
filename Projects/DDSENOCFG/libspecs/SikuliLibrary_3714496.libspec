<?xml version="1.0" encoding="UTF-8"?>
<keywordspec generated="20180712 11:03:47" type="library" name="SikuliLibrary" format="ROBOT">
<version>1.0.1</version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>Documentation for test library ``SikuliLibrary``.</doc>
<init>
<arguments>
<arg>port=0</arg>
<arg>timeout=3.0</arg>
<arg>mode=OLD</arg>
</arguments>
<doc>
        @port: sikuli java process socket port
        @timeout: Timeout of waiting java process started
        @mode: if set as 'DOC',  will stop java process automatically, 
               if set as 'PYTHON', means library is running out of robot environment
               if set as 'CREATE', it is only for mvn package usage, will create keywords.py file
               if set as 'OLD'(default), sikuli java process will be started when library is inited
               if set as 'NEW', user should use 'start_sikuli_process' to start java process</doc>
<tags>
</tags>
</init>
<kw name="Add Image Path">
<arguments>
<arg>path</arg>
</arguments>
<doc>Add image path</doc>
<tags>
</tags>
</kw>
<kw name="Capture Screen">
<arguments>
</arguments>
<doc>Capture whole screen, file name is returned</doc>
<tags>
</tags>
</kw>
<kw name="Clear All Highlights">
<arguments>
</arguments>
<doc>Clear all highlights from screen</doc>
<tags>
</tags>
</kw>
<kw name="Clear Highlight">
<arguments>
<arg>image</arg>
</arguments>
<doc>Clear highlight from screen</doc>
<tags>
</tags>
</kw>
<kw name="Click">
<arguments>
<arg>image</arg>
<arg>xOffset=0</arg>
<arg>yOffset=0</arg>
</arguments>
<doc>Click image</doc>
<tags>
</tags>
</kw>
<kw name="Click In">
<arguments>
<arg>areaImage</arg>
<arg>targetImage</arg>
</arguments>
<doc>Click in. 
Click target image in area image.</doc>
<tags>
</tags>
</kw>
<kw name="Double Click">
<arguments>
<arg>image</arg>
<arg>xOffset=0</arg>
<arg>yOffset=0</arg>
</arguments>
<doc>Double click image</doc>
<tags>
</tags>
</kw>
<kw name="Double Click In">
<arguments>
<arg>areaImage</arg>
<arg>targetImage</arg>
</arguments>
<doc>Double click in. 
Double click target image in area image.</doc>
<tags>
</tags>
</kw>
<kw name="Drag And Drop">
<arguments>
<arg>srcImage</arg>
<arg>targetImage</arg>
</arguments>
<doc>Drag the source image to target image.
If source image is empty, drag the last match and drop at given target</doc>
<tags>
</tags>
</kw>
<kw name="Drag And Drop By Offset">
<arguments>
<arg>srcImage</arg>
<arg>xOffset</arg>
<arg>yOffset</arg>
</arguments>
<doc>Drag the source image to target by offset.
If source image is empty, drag the last match and drop at given target</doc>
<tags>
</tags>
</kw>
<kw name="Exists">
<arguments>
<arg>image</arg>
<arg>timeout=</arg>
</arguments>
<doc>Exists

 Check whether image exists in screen
 @image: expected image in screen
 @timeout: wait seconds

 Example Usage:
 | ${is_exist}  | Exists | image.png | 0 |</doc>
<tags>
</tags>
</kw>
<kw name="Get Match Score">
<arguments>
<arg>image</arg>
</arguments>
<doc>Tries to find the image on the screen, returns accuracy score (0-1)
 Example Usage:
 | ${score} = | Get Match Score |  somethingThatMayExist.png |
 | Run Keyword if | ${score} &gt; 0.95 | keyword1 | ELSE | keyword2 |</doc>
<tags>
</tags>
</kw>
<kw name="Get Text">
<arguments>
<arg>image=</arg>
</arguments>
<doc>Get text

 If image is not given, keyword will get text from whole Screen
 If image is given, keyword will get text from matched region
 Call keyword setOcrTextRead to set OcrTextRead as true, before using text recognition keywords

 Example Usage:
 | Set Ocr Text Read  | true       |
 | Get Text           |
 | Get Text           | test.png   |</doc>
<tags>
</tags>
</kw>
<kw name="Highlight">
<arguments>
<arg>image</arg>
</arguments>
<doc>Highlight matched image</doc>
<tags>
</tags>
</kw>
<kw name="Input Text">
<arguments>
<arg>image</arg>
<arg>text</arg>
</arguments>
<doc>Input text. Image could be empty</doc>
<tags>
</tags>
</kw>
<kw name="Mouse Down">
<arguments>
<arg>*mouseButtons</arg>
</arguments>
<doc>Press and hold the specified buttons

 @mouseButtons: Could be LEFT, MIDDLE, RIGHT

 Example Usage:
 | Mouse Move   | test.png | 
 | Mouse Down   | LEFT     | RIGHT |
 | Mouse Up     |</doc>
<tags>
</tags>
</kw>
<kw name="Mouse Move">
<arguments>
<arg>image=</arg>
</arguments>
<doc>Move the mouse pointer to the target

 @image: if image is empty, will move mouse to the last matched.

 Example Usage:
 | Mouse Move              | test.png | 
 | Screen Should Contain   | test.png | 
 | Mouse Move |</doc>
<tags>
</tags>
</kw>
<kw name="Mouse Up">
<arguments>
<arg>*mouseButtons</arg>
</arguments>
<doc>release the specified mouse buttons

 @mouseButtons: Could be LEFT, MIDDLE, RIGHT. If empty, all currently held buttons are released

 Example Usage:
 | Mouse Move   | test.png | 
 | Mouse Down   | LEFT     | RIGHT |
 | Mouse Up     | LEFT     | RIGHT |</doc>
<tags>
</tags>
</kw>
<kw name="Paste Text">
<arguments>
<arg>image</arg>
<arg>text</arg>
</arguments>
<doc>Paste text. Image could be empty</doc>
<tags>
</tags>
</kw>
<kw name="Press Special Key">
<arguments>
<arg>keyConstant</arg>
</arguments>
<doc>Presses a special keyboard key.

 For a list of possible Keys view docs for org.sikuli.script.Key .

 Example Usage:
 | Double Click | textFieldWithDefaultText.png | 
 | Press Special Key | DELETE |</doc>
<tags>
</tags>
</kw>
<kw name="Remove Image Path">
<arguments>
<arg>path</arg>
</arguments>
<doc>Remove image path</doc>
<tags>
</tags>
</kw>
<kw name="Right Click">
<arguments>
<arg>image</arg>
</arguments>
<doc>Right click image</doc>
<tags>
</tags>
</kw>
<kw name="Right Click In">
<arguments>
<arg>areaImage</arg>
<arg>targetImage</arg>
</arguments>
<doc>Right click in. 
Right click target image in area image.</doc>
<tags>
</tags>
</kw>
<kw name="Screen Should Contain">
<arguments>
<arg>image</arg>
</arguments>
<doc>Screen should contain image</doc>
<tags>
</tags>
</kw>
<kw name="Screen Should Not Contain">
<arguments>
<arg>image</arg>
</arguments>
<doc>Screen should not contain image</doc>
<tags>
</tags>
</kw>
<kw name="Set Capture Folder">
<arguments>
<arg>path</arg>
</arguments>
<doc>Set folder for captured images</doc>
<tags>
</tags>
</kw>
<kw name="Set Capture Matched Image">
<arguments>
<arg>value</arg>
</arguments>
<doc>Set capture matched images, the default value is true
Example:
| Set Capture Matched Image | false |</doc>
<tags>
</tags>
</kw>
<kw name="Set Min Similarity">
<arguments>
<arg>minSimilarity</arg>
</arguments>
<doc>Set Sikuli minSimilarity(0-1)</doc>
<tags>
</tags>
</kw>
<kw name="Set Ocr Text Read">
<arguments>
<arg>ocrTextRead</arg>
</arguments>
<doc>Set Sikuli OCR text read(true/false)</doc>
<tags>
</tags>
</kw>
<kw name="Set Timeout">
<arguments>
<arg>timeout</arg>
</arguments>
<doc>Set Sikuli timeout(seconds)</doc>
<tags>
</tags>
</kw>
<kw name="Start Sikuli Process">
<arguments>
<arg>port=None</arg>
</arguments>
<doc>
        This keyword is used to start sikuli java process.
        If library is inited with mode "OLD", sikuli java process is started automatically.
        If library is inited with mode "NEW", this keyword should be used.

        :param port: port of sikuli java process, if value is None or 0, a random free port will be used
        :return: None</doc>
<tags>
</tags>
</kw>
<kw name="Stop Remote Server">
<arguments>
</arguments>
<doc>Stops the remote server.

The server may be configured so that users cannot stop it.</doc>
<tags>
</tags>
</kw>
<kw name="Type With Modifiers">
<arguments>
<arg>text</arg>
<arg>*modifiers</arg>
</arguments>
<doc>Type with modifiers
 Example:
 |Type With Modifiers| A| CTRL |</doc>
<tags>
</tags>
</kw>
<kw name="Wait For Image">
<arguments>
<arg>wantedImage</arg>
<arg>notWantedImage</arg>
<arg>timeout</arg>
</arguments>
<doc>Wait For Image

 Check wantedImage exist. If notWantedImage appear or timeout happened, throw exception

 @wantedImage: expected image in screen

 @notWantedImage: unexpected image in screen

 @timeout: wait seconds

 Example Usage:
 | Wait For Image  | wanted.png | notWanted.png | 5 |</doc>
<tags>
</tags>
</kw>
<kw name="Wait For Multiple Images">
<arguments>
<arg>timeout</arg>
<arg>pollingInterval</arg>
<arg>expectedImages</arg>
<arg>notExpectedImages</arg>
</arguments>
<doc>Wait For Multiple Images

 Check if images exists in expectedImages or notExpectedImages list. If image appears that is listed in notExpectedImages list or timeout happened, throw exception If image appears that is listed in expectedImageslist return succesfully. 

 @timeout: wait seconds

 @pollingInterval: time in seconds between screen checks

 @expectedImages: list of expected images in screen

 @notExpectedImages: list of not expected images in screen

 Example Usage:
 | @{wanted_images} =  | Create List | wanted_image1.png | wanted_image2.png |
 | @{not_wanted_images} =  | Create List | not_wanted_image1.png | not_wanted_image2.png | not_wanted_image3.png |
 | Wait For Multiple Images | 900 | 10 | ${wanted_images} | ${not_wanted_images} |</doc>
<tags>
</tags>
</kw>
<kw name="Wait Until Screen Contain">
<arguments>
<arg>image</arg>
<arg>timeout</arg>
</arguments>
<doc>Wait until image shown in screen</doc>
<tags>
</tags>
</kw>
<kw name="Wait Until Screen Not Contain">
<arguments>
<arg>image</arg>
<arg>timeout</arg>
</arguments>
<doc>Wait until image not in screen</doc>
<tags>
</tags>
</kw>
<kw name="Wheel Down">
<arguments>
<arg>steps</arg>
<arg>image=</arg>
</arguments>
<doc>Move mouse to the target, and wheel down with give steps

 Example Usage:
 | Wheel Down     | 5   | 
 | Wheel Down     | 5   |  test.png   |</doc>
<tags>
</tags>
</kw>
<kw name="Wheel Up">
<arguments>
<arg>steps</arg>
<arg>image=</arg>
</arguments>
<doc>Move mouse to the target, and wheel up with give steps

 Example Usage:
 | Wheel Up     | 5   | 
 | Wheel Up     | 5   |  test.png   |</doc>
<tags>
</tags>
</kw>
</keywordspec>
